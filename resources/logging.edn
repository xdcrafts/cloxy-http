;"An example Timbre v4 config map.
;
;  APPENDERS
;    An appender is a map with keys:
;      :min-level       ; Level keyword, or nil (=> no minimum level)
;      :enabled?        ;
;      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)
;      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil
;      :output-fn       ; Optional override for inherited (fn [data]) -> string
;      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _}
;      :ns-whitelist    ; Optional, stacks with active config's whitelist
;      :ns-blacklist    ; Optional, stacks with active config's blacklist
;      :middleware-fn   ; Optional, stacks with active config's middleware
;      :fn              ; (fn [data]) -> side effects, with keys described below
;
;    An appender's fn takes a single data map with keys:
;      :config          ; Entire config map (this map, etc.)
;      :appender-id     ; Id of appender currently dispatching
;      :appender        ; Entire map of appender currently dispatching
;      :instant         ; Platform date (java.util.Date or js/Date)
;      :level           ; Keyword
;      :error-level?    ; Is level e/o #{:error :fatal}?
;      :?ns-str         ; String,  or nil
;      :?file           ; String,  or nil
;      :?line           ; Integer, or nil ; Waiting on CLJ-865
;      :?err            ; First-arg platform error, or nil
;      :vargs           ; Vector of raw args
;      :output_         ; Forceable - final formatted output string created
;                       ; by calling (output-fn <this-data-map>)
;      :msg_            ; Forceable - args as a string
;      :timestamp_      ; Forceable - string
;      :hostname_       ; Forceable - string (clj only)
;      :output-fn       ; (fn [data]) -> formatted output string
;                       ; (see `default-output-fn` for details)
;      :context         ; *context* value at log time (see `with-context`)
;
;      **NB** - any keys not specifically documented here should be
;      considered private / subject to change without notice.
;
;  MIDDLEWARE
;    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that
;    transform the data map dispatched to appender fns. If any middleware
;    returns nil, NO dispatch will occur (i.e. the event will be filtered).
;
;  The `example-config` source code contains further settings and details.
;  See also `set-config!`, `merge-config!`, `set-level!`."

{:level :info  ; e/o #{:trace :debug :info :warn :error :fatal :report}
 ;; Control log filtering by namespaces/patterns. Useful for turning off
 ;; logging in noisy libraries, etc.:
 :ns-whitelist  []
 :ns-blacklist  []
 :middleware [] ; (fns [data]) -> ?data, applied left->right
 ;; Clj only:
 :timestamp-opts taoensso.timbre/default-timestamp-opts ; {:pattern _ :locale _ :timezone _}
 :output-fn taoensso.timbre/default-output-fn ; (fn [data]) -> string
 :appenders
 {;; The standard println appender:
  :println (taoensso.timbre/println-appender {:stream :auto})}}
